AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Cognito APIGATEWAY test

Parameters:
  ProjectName:
    Type: String
    Description: Proyecto Residentes para Tendencias de Arquitectura de Software
    Default: residentes
  Stage:
    Type: String
    Description: Stage of API GATEWAY
    Default: Prod
  TableName: 
    Type: String
    Description: (Required) The name of the DynamoDB table you want to create and save to. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    Default: 'pagos'
Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "auth-api-${Stage}"
      StageName: !Ref Stage
      OpenApiVersion: '2.0'
      Description: API supporting the application
      TracingEnabled: true
      Variables:
        LAMBDA_ALIAS: !Ref Stage
      Cors:
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowMethods: "'OPTIONS,DELETE,GET,HEAD,POST,PUT'"
        AllowOrigin: "'*'"
      BinaryMediaTypes: 
          - "*/*"
  DeleteDocumentFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../bin/delete_document.zip
      FunctionName: !Sub "${ProjectName}-delete_document"
      Handler: bootstrap
      Runtime: provided.al2
      Environment:
        Variables:
          TABLE_NAME: !Ref DocumentTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DocumentTable
      Events:
        DeleteDocument:
          Type: Api
          Properties:
            Path: /document/{id_documento}
            Method: delete
            RestApiId: !Ref ApiGatewayApi
  UpdateDocumentFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../bin/update_document.zip
      FunctionName: !Sub "${ProjectName}-update_document"
      Handler: bootstrap
      Runtime: provided.al2
      Environment:
        Variables:
          TABLE_NAME: !Ref DocumentTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DocumentTable
      Events:
        UpdateDocument:
          Type: Api
          Properties:
            Path: /document/{id_documento}
            Method: put
            RestApiId: !Ref ApiGatewayApi
  CreateDocumentFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../bin/create_document.zip
      FunctionName: !Sub "${ProjectName}-create_document"
      Handler: bootstrap
      Runtime: provided.al2
      Environment:
        Variables:
          TABLE_NAME: !Ref DocumentTable
          SQS_NAME: !Ref SQSProviderQueue
          BUCKET_NAME: !Ref DocumentBucket
          BUCKET_KEY: !Sub "documentos/"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DocumentTable
        - Statement:
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Resource: !GetAtt SQSProviderQueue.Arn
      Events:
        CreateDocument:
          Type: Api
          Properties:
            Path: /document
            Method: post
            RestApiId: !Ref ApiGatewayApi
  GetAllDocumentsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../bin/get_all_documents.zip
      FunctionName: !Sub "${ProjectName}-get_all_documents"
      Handler: bootstrap
      Runtime: provided.al2
      Environment:
        Variables:
          TABLE_NAME: !Ref DocumentTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DocumentTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:PartiQLSelect'
              Resource: !GetAtt DocumentTable.Arn
      Events:
        GetAllDocuments:
          Type: Api
          Properties:
            Path: /document
            Method: get
            RestApiId: !Ref ApiGatewayApi
  FilterDocumentsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../bin/filter_document.zip
      FunctionName: !Sub "${ProjectName}-filter_document"
      Handler: bootstrap
      Runtime: provided.al2
      Environment:
        Variables:
          TABLE_NAME: !Ref DocumentTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DocumentTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:Scan'
              Resource: !GetAtt DocumentTable.Arn
      Events:
        FilterDocuments:
          Type: Api
          Properties:
            Path: /document/filter
            Method: get
            RestApiId: !Ref ApiGatewayApi
  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../bin/hello.zip
      FunctionName: !Sub "${ProjectName}-hello"
      Handler: bootstrap
      Runtime: provided.al2
      Events:
        HelloWorld:
          Type: Api 
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref ApiGatewayApi
  SQSProviderQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${ProjectName}-sqs_provider"
  SQSConsumerFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../bin/sqs_consumer.zip
      FunctionName: !Sub "${ProjectName}-sqs_consumer"
      Handler: bootstrap
      Runtime: provided.al2
      Environment:
        Variables:
          BUCKET_NAME: !Ref DocumentBucket
          BUCKET_KEY: !Sub "documentos/"
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
              Resource: !GetAtt SQSProviderQueue.Arn
        - S3WritePolicy:
            BucketName: !Ref DocumentBucket
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SQSProviderQueue.Arn
            BatchSize: 1
  FileReadFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../bin/image_read.zip
      FunctionName: !Sub "${ProjectName}-image_read"
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 900
      MemorySize: 1024
      Environment:
        Variables:
          BUCKET_NAME: !Ref DocumentBucket
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref DocumentBucket
      Events:
        ReadFile:
          Type: Api 
          Properties:
            Path: /image_read
            Method: get
            RestApiId: !Ref ApiGatewayApi
  DocumentTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub "${ProjectName}-documentos"
      AttributeDefinitions:
        - AttributeName: id_documento
          AttributeType: S
      KeySchema:
        - AttributeName: id_documento
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  DocumentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "documentos-pdf"
      PublicAccessBlockConfiguration:
          BlockPublicAcls: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      WebsiteConfiguration:
        IndexDocument: index.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - DELETE
              - HEAD
              - POST
              - PUT
            AllowedOrigins:
              - '*'
  DocumentBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DocumentBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: 's3:GetObject'
            Effect: 'Allow'
            Principal: '*'
            Resource: !Sub '${DocumentBucket.Arn}/*'
          - Action: 's3:ListBucket'
            Effect: 'Allow'
            Principal: '*'
            Resource: !GetAtt DocumentBucket.Arn
  AppSyncApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub ${ProjectName}-GraphQLApi$-{Stage}
      AuthenticationType: API_KEY
    
  AppSyncAPIKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Definition: !Sub |
        type ${TableName} {
          ${TableName}_id: ID!
          departamento: String
          servicio: String
          fecha_de_pago: String
          estado: String
          cantidad: String
        }
        type Paginated_${TableName} {
          items: [${TableName}!]!
          nextToken: String
        }
        type Query {
          all(limit: Int, nextToken: String): Paginated_${TableName}!
          getOne(${TableName}_id: ID!): ${TableName}
        }
        type Mutation {
          save(${TableName}_id: ID!, name: String!): ${TableName}
          delete(${TableName}_id: ID!): ${TableName}
        }
        type Schema {
          query: Query
          mutation: Mutation
        }
  AppSyncTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: !Ref TableName
      Description: DynamoDB Table AppSync Data Source
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt DynamoDBRole.Arn
      DynamoDBConfig:
        TableName: !Ref DynamoDBTable
        AwsRegion: !Sub ${AWS::Region}

  AppSyncGetOneQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: getOne
      DataSourceName: !GetAtt AppSyncTableDataSource.Name
      RequestMappingTemplate: !Sub |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "${TableName}_id": $util.dynamodb.toDynamoDBJson($ctx.args.${TableName}_id)
          }
        }
      ResponseMappingTemplate: "$util.toJson($ctx.result)"
  AppSyncAllQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: all
      DataSourceName: !GetAtt AppSyncTableDataSource.Name
      RequestMappingTemplate: !Sub |
        {
          "version": "2017-02-28",
          "operation" : "Scan",
          "limit": $util.defaultIfNull($ctx.args.limit, 20),
          "nextToken": $util.toJson($util.defaultIfNullOrEmpty($ctx.args.nextToken, null))
        },
      ResponseMappingTemplate: "$util.toJson($ctx.result)"
  AppSyncSaveMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: save
      DataSourceName: !GetAtt AppSyncTableDataSource.Name
      RequestMappingTemplate: !Sub |
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "${TableName}_id": $util.dynamodb.toDynamoDBJson($ctx.args.${TableName}_id)
          },
          "attributeValues": {
            "name": $util.dynamodb.toDynamoDBJson($ctx.args.name)
          }
        }
      ResponseMappingTemplate: "$util.toJson($ctx.result)"
  AppSyncDeleteMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: delete
      DataSourceName: !GetAtt AppSyncTableDataSource.Name
      RequestMappingTemplate: !Sub |
        {
          "version": "2017-02-28",
          "operation": "DeleteItem",
          "key": {
            "${TableName}_id": $util.dynamodb.toDynamoDBJson($ctx.args.${TableName}_id)
          }
        }
      ResponseMappingTemplate: "$util.toJson($ctx.result)"
  DynamoDBRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${TableName}-appsync-dynamodb-role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${ProjectName}-${TableName}
      AttributeDefinitions:
        -
          AttributeName: !Sub ${TableName}_id
          AttributeType: S
      KeySchema:
        -
          AttributeName: !Sub ${TableName}_id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_IMAGE
Outputs:
  DocumentDynamoDBTable:
    Description: Nombre de la tabla de documentos en DynamoDB
    Value: !Ref DocumentTable
  DocumentoApi:
    Description: "API Gateway endpoint URL para documentos"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
  PagosDynamoDBTable:
    Description: The name of the DynamoDB Table
    Value: !Ref DynamoDBTable
  GraphQLApiEndpoint:
    Description: The URL to the GraphQL Endpoint
    Value: !GetAtt AppSyncApi.GraphQLUrl
  GraphQLApiId:
    Description: The API ID of the GraphQL API
    Value: !GetAtt AppSyncApi.ApiId
  APIKey:
    Description: API Key
    Value: !GetAtt AppSyncAPIKey.ApiKey
